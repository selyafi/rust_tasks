// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDate;
use chrono::NaiveTime;
use bigdecimal::BigDecimal;
use uuid::Uuid;
use chrono::DateTime;
use chrono::offset::Utc;
#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct AdditionalContactsSchedule {
    pub Id: Uuid,
    pub AdditionalContactId: Option<Uuid>,
    pub OpenTime: Option<NaiveTime>,
    pub CloseTime: Option<NaiveTime>,
    pub DayOfWeek: i32,
    pub IsClosed: bool,
    pub Is24Hours: bool,
    pub BreakStart: Option<NaiveTime>,
    pub BreakEnd: Option<NaiveTime>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct AdditionalSetting {
    pub Id: Uuid,
    pub AddressType: i16,
    pub CustomAddress: Option<String>,
    pub SendNotificationToPassengerByEmail: bool,
    pub SendNotificationToPassengerBySms: bool,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub CaseId: Uuid,
    pub ArrivalAirportId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Addresse {
    pub ID: Uuid,
    pub RF: Option<String>,
    pub ICAO: Option<String>,
    pub NameLat: Option<String>,
    pub Name: Option<String>,
    pub Email: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct AirportTranslation {
    pub ID: Uuid,
    pub AirportId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Airport {
    pub ID: Uuid,
    pub IATA: Option<String>,
    pub ICAO: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct ArchivePolicySetting {
    pub Id: Uuid,
    pub Type: Option<i32>,
    pub Period: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Uuid,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggageContentCategory {
    pub Id: i32,
    pub RU: String,
    pub EN: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggageContent {
    pub Id: Uuid,
    pub BaggagePlaceId: Option<Uuid>,
    pub BaggageCategoryId: Option<i32>,
    pub BaggageObject: Option<String>,
    pub BaggageObjectDescription: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggageOwner {
    pub Id: Uuid,
    pub BaggagePlaceId: Uuid,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub SecondName: Option<String>,
    pub Initials: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggagePhoto {
    pub Id: Uuid,
    pub BaggagePlaceId: Option<Uuid>,
    pub MimeType: Option<String>,
    pub Size: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub PhotoViewType: Option<i16>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggagePlace {
    pub Id: Uuid,
    pub CaseId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Status: i16,
    pub PlaceNumber: i16,
    pub LostInAirportId: Option<Uuid>,
    pub LostReasonId: Option<Uuid>,
    pub DeliveredAt: Option<DateTime<Utc>>,
    pub StorageLocation: Option<String>,
    pub BaggageIssueType: Option<i16>,
    pub DeliveryCost: Option<BigDecimal>,
    pub DeliveryCostCurrencyId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct BaggageProperty {
    pub Id: Uuid,
    pub BaggagePlaceId: Uuid,
    pub ColorId: Uuid,
    pub MaterialId: Uuid,
    pub BaggageTagNumber: Option<String>,
    pub BaggageWeight: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub BaggageTypeId: Uuid,
    pub DeliveryTagNumber: Option<String>,
    pub AdditionalSpecifics: Option<String>,
    pub BaggageTypeDescription: Option<String>,
    pub BrandId: Option<Uuid>,
    pub ColorDescription: Option<String>,
    pub LostInAirportId: Option<Uuid>,
    pub LostReasonId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(BaggagePropertyId, BaggageTypeId))]
pub struct BaggagePropertiesBasicElement {
    pub BaggagePropertyId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(BaggagePropertyId, BaggageTypeId))]
pub struct BaggagePropertiesExternalElement {
    pub BaggagePropertyId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(BaggageTypeId, Side))]
pub struct BaggageType3DModelSidePicture {
    pub BaggageTypeId: Uuid,
    pub Side: String,
    pub MimeType: Option<String>,
    pub Content: Option<Vec<u8>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BaggageType3DModel {
    pub ID: Uuid,
    pub ModelContent: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(BaggageTypeId, IsThumbnail, IsColored))]
pub struct BaggageTypeImage {
    pub BaggageTypeId: Uuid,
    pub IsThumbnail: bool,
    pub IsColored: bool,
    pub MimeType: String,
    pub Content: Vec<u8>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BaggageTypeTranslation {
    pub ID: Uuid,
    pub BaggageTypeId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BaggageType {
    pub ID: Uuid,
    pub TypeGroup: Option<i16>,
    pub Code: String,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Brand {
    pub ID: Uuid,
    pub Name: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BsmRushDelivery {
    pub ID: Uuid,
    pub BsmRushId: String,
    pub BagTag: String,
    pub PlaceQTY: i32,
    pub Weight: BigDecimal,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub LostBaggagePlaceId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BsmRushDeliveryFlight {
    pub ID: Uuid,
    pub BsmRushDeliveryId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CalendarDate {
    pub ID: i32,
    pub Date: NaiveDate,
    pub Year: i16,
    pub Month: i16,
    pub DayOfMonth: i16,
    pub DayOfYear: i16,
    pub Quarter: i16,
    pub Week: i16,
    pub WeekDay: i16,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CarrierTranslation {
    pub ID: Uuid,
    pub CarrierId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Carrier {
    pub ID: Uuid,
    pub IATA: Option<String>,
    pub ICAO: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CaseBaggageFlight {
    pub ID: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub CaseId: Uuid,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(LostBaggageCaseId, UnclaimedBaggageCaseId))]
pub struct CaseMatche {
    pub LostBaggageCaseId: Uuid,
    pub UnclaimedBaggageCaseId: Uuid,
    pub MatchingScore: f64,
    pub TagMatches: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct CaseMatchingCoefficient {
    pub FirstName: f64,
    pub LastName: f64,
    pub Initials: f64,
    pub Phone: f64,
    pub PermanentAddress: f64,
    pub TemporaryAddress: f64,
    pub Email: f64,
    pub FlightNumber: f64,
    pub Carrier: f64,
    pub DepartureAirport: f64,
    pub ArrivalAirport: f64,
    pub BaggageTagNumber: f64,
    pub BaggageType: f64,
    pub Color: f64,
    pub Material: f64,
    pub BasicElements: f64,
    pub ExternalElements: f64,
    pub BaggageCategories: f64,
    pub BaggageWeight: f64,
    pub Brand: f64,
    pub Id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationId, CarrierId))]
pub struct CaseNumber {
    pub OrganizationId: Uuid,
    pub CarrierId: Uuid,
    pub CurrentNumber: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CasePassengerFlight {
    pub ID: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub CaseId: Uuid,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct CaseRequester {
    pub Id: Uuid,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub SecondName: Option<String>,
    pub Initials: Option<String>,
    pub ServiceClass: Option<String>,
    pub Language: Option<String>,
    pub PhoneNumber: Option<String>,
    pub BookingNumber: Option<String>,
    pub TicketNumber: Option<String>,
    pub PermanentAddress: Option<String>,
    pub TemporaryAddress: Option<String>,
    pub EmailAddress: Option<String>,
    pub CarrierLoyaltyCard: Option<String>,
    pub AdditionalPhoneNumber: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub CaseId: Uuid,
    pub Gender: Option<i16>,
    pub TemporaryDateEnd: Option<DateTime<Utc>>,
    pub TemporaryDateStart: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct CaseStatu {
    pub Id: i16,
    pub Name: String,
    pub NameEN: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Case {
    pub ID: Uuid,
    pub CaseStatus: Option<i16>,
    pub BaggageCaseType: i16,
    pub CaseNumber: Option<String>,
    pub SuspendedDate: Option<DateTime<Utc>>,
    pub ArchiveDate: Option<DateTime<Utc>>,
    pub RenewalDate: Option<DateTime<Utc>>,
    pub ClosedDate: Option<DateTime<Utc>>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub OrganizationId: Option<Uuid>,
    pub LostReasonCommentary: Option<String>,
    pub LostReasonId: Option<Uuid>,
    pub TotalWeight: Option<String>,
    pub LostInAirportId: Option<Uuid>,
    pub CaseAirportId: Option<Uuid>,
    pub CaseCarrierId: Option<Uuid>,
    pub TotalReceivedPlaces: Option<i32>,
    pub TotalReceivedWeight: Option<BigDecimal>,
    pub TotalRegisteredPlaces: Option<i32>,
    pub TotalRegisteredWeight: Option<BigDecimal>,
    pub HasHighImportanceMark: bool,
    pub HighImportanceMarkComment: Option<String>,
    pub ExternalSourceDocumentId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct CasesHistory {
    pub Id: Uuid,
    pub Status: Option<i16>,
    pub CaseId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Message: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Comment {
    pub ID: Uuid,
    pub CommentText: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialActHistory {
    pub ID: Uuid,
    pub AbstractCommercialActId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Message: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialActItemDamageDetail {
    pub ID: Uuid,
    pub ItemId: Uuid,
    pub DamageNumber: i32,
    pub DamageReasonId: Uuid,
    pub DamagedSide: Option<String>,
    pub DamageType: Option<String>,
    pub DamageDegree: Option<String>,
    pub Description: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialActItem {
    pub ID: Uuid,
    pub CommercialActId: Uuid,
    pub ItemNumber: i16,
    pub SourcePlaceId: Uuid,
    pub BaggageTagNumber: Option<String>,
    pub DeliveryTagNumber: Option<String>,
    pub BaggageType: Option<String>,
    pub PackingCondition: Option<String>,
    pub Introscoped: bool,
    pub BaggageOpened: bool,
    pub HasDamages: bool,
    pub Cost: BigDecimal,
    pub ContentCost: BigDecimal,
    pub IsSealed: bool,
    pub SealNumber: Option<String>,
    pub AdditionalInformation: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialActPassengerFlight {
    pub ID: Uuid,
    pub CommercialActId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialActPassenger {
    pub ID: Uuid,
    pub CommercialActId: Uuid,
    pub Surname: String,
    pub TicketNumber: Option<String>,
    pub BookingNumber: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CommercialAct {
    pub ID: Uuid,
    pub Type: i16,
    pub ActNumber: String,
    pub DocumentNumber: Option<String>,
    pub OrganizationId: Uuid,
    pub AirportId: Uuid,
    pub CarrierId: Uuid,
    pub Reason: Option<i16>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub SourceDocumentId: Uuid,
    pub CurrencyId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Currency {
    pub ID: Uuid,
    pub ISO3Code: String,
    pub Sign: String,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct CurrencyTranslation {
    pub ID: Uuid,
    pub CurrencyId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamageReasonTranslation {
    pub ID: Uuid,
    pub DamageReasonId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamageReason {
    pub ID: Uuid,
    pub Code: String,
    pub ParentId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggage {
    pub ID: Uuid,
    pub OrganizationId: Uuid,
    pub AirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub Status: i16,
    pub DamagedBaggageNumber: Option<String>,
    pub ArchiveDate: Option<DateTime<Utc>>,
    pub GuiltyAirportId: Option<Uuid>,
    pub CurrencyId: Uuid,
    pub TotalAmount: BigDecimal,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub TotalWeight: Option<String>,
    pub HasHighImportanceMark: bool,
    pub HighImportanceMarkComment: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageContent {
    pub ID: Uuid,
    pub PlaceId: Uuid,
    pub BaggageCategoryId: Option<i32>,
    pub BaggageObject: Option<String>,
    pub BaggageObjectDescription: Option<String>,
    pub Cost: Option<BigDecimal>,
    pub DamageDegree: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageDamageInfo {
    pub ID: Uuid,
    pub DamagedBaggagePlaceId: Uuid,
    pub AssignedToModelSide: Option<String>,
    pub AssignedToPhotoId: Option<Uuid>,
    pub Coord_X: Option<f64>,
    pub Coord_Y: Option<f64>,
    pub DamageType: Option<String>,
    pub DamageReasonId: Option<Uuid>,
    pub DamageDegree: Option<String>,
    pub Description: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Coord_Z: Option<f64>,
    pub DamageNumber: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageDamageInfoPhoto {
    pub ID: Uuid,
    pub DamagedBaggageDamageInfoId: Uuid,
    pub MimeType: Option<String>,
    pub Size: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageFlight {
    pub ID: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
    pub DamagedBaggageId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageHistory {
    pub ID: Uuid,
    pub DamagedBaggageId: Uuid,
    pub Status: Option<i16>,
    pub Message: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationId, CarrierId))]
pub struct DamagedBaggageNumber {
    pub OrganizationId: Uuid,
    pub CarrierId: Uuid,
    pub CurrentNumber: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageOwner {
    pub ID: Uuid,
    pub PlaceId: Uuid,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub SecondName: Option<String>,
    pub Initials: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggagePassengerFlight {
    pub ID: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
    pub DamagedBaggageId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggagePlacePhoto {
    pub ID: Uuid,
    pub DamagedBaggagePlaceId: Option<Uuid>,
    pub MimeType: Option<String>,
    pub Size: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggagePlace {
    pub ID: Uuid,
    pub DamagedBaggageId: Uuid,
    pub PlaceNumber: i16,
    pub DamagedInAirportId: Option<Uuid>,
    pub WearDegree: Option<i16>,
    pub PurchaseYear: Option<i32>,
    pub BoxCost: Option<BigDecimal>,
    pub TotalCost: Option<BigDecimal>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageProperty {
    pub ID: Uuid,
    pub PlaceId: Uuid,
    pub ColorId: Uuid,
    pub ColorDescription: Option<String>,
    pub BaggageTypeId: Uuid,
    pub BaggageTypeDescription: Option<String>,
    pub MaterialId: Uuid,
    pub BaggageTagNumber: Option<String>,
    pub DeliveryTagNumber: Option<String>,
    pub BaggageWeight: Option<BigDecimal>,
    pub BrandId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(DamagedBaggagePropertyId, BaggageTypeId))]
pub struct DamagedBaggagePropertiesBasicElement {
    pub DamagedBaggagePropertyId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(DamagedBaggagePropertyId, BaggageTypeId))]
pub struct DamagedBaggagePropertiesExternalElement {
    pub DamagedBaggagePropertyId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageRequester {
    pub ID: Uuid,
    pub DamagedBaggageId: Uuid,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub SecondName: Option<String>,
    pub Initials: Option<String>,
    pub Gender: Option<i16>,
    pub ServiceClass: Option<String>,
    pub Language: Option<String>,
    pub PhoneNumber: Option<String>,
    pub BookingNumber: Option<String>,
    pub TicketNumber: Option<String>,
    pub PermanentAddress: Option<String>,
    pub TemporaryAddress: Option<String>,
    pub TemporaryDateStart: Option<DateTime<Utc>>,
    pub TemporaryDateEnd: Option<DateTime<Utc>>,
    pub EmailAddress: Option<String>,
    pub CarrierLoyaltyCard: Option<String>,
    pub AdditionalPhoneNumber: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DamagedBaggageSetting {
    pub ID: Uuid,
    pub DamagedBaggageId: Uuid,
    pub SendNotificationToPassengerByEmail: bool,
    pub SendNotificationToPassengerBySms: bool,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(CommercialActId))]
pub struct DamagedCommercialActCheckResult {
    pub CommercialActId: Uuid,
    pub PlacesRegistered: i16,
    pub PlacesDamaged: i16,
    pub RegisteredWeight: BigDecimal,
    pub DamagedWeight: BigDecimal,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct DataProtectionKey {
    pub Id: i32,
    pub FriendlyName: Option<String>,
    pub Xml: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DelayCodeTranslation {
    pub ID: Uuid,
    pub DelayCodeId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DelayCode {
    pub ID: Uuid,
    pub ParentId: Option<Uuid>,
    pub Code: String,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct DocumentAttachment {
    pub Id: Uuid,
    pub DocumentId: Uuid,
    pub Type: i16,
    pub ActualVersionId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Uuid,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct DocumentAttachmentVersion {
    pub Id: Uuid,
    pub AttachmentId: Uuid,
    pub Name: String,
    pub MimeType: String,
    pub Size: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Uuid,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(SourceDocumentId, TargetDocumentId, SourcePlaceId, TargetPlaceId))]
pub struct DocumentsLink {
    pub SourceDocumentId: Uuid,
    pub SourcePlaceId: Uuid,
    pub TargetDocumentId: Uuid,
    pub TargetPlaceId: Uuid,
    pub SourceDocumentType: i16,
    pub TargetDocumentType: i16,
    pub LinkType: i16,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ExternalSystemSourceDocument {
    pub ID: Uuid,
    pub ExternalSourceSystem: Option<String>,
    pub SourceNumber: Option<String>,
    pub TargetDocumentType: Option<i32>,
    pub TargetDocumentId: Uuid,
    pub SourceData: Option<String>,
    pub SourceSpecificInfo: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(MessageId, Channel))]
pub struct MessageNotificationChannel {
    pub Channel: i16,
    pub MessageId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Message {
    pub ID: Uuid,
    pub CaseId: Option<Uuid>,
    pub CaseNumber: Option<String>,
    pub CaseAirportId: Option<Uuid>,
    pub CaseCarrierId: Option<Uuid>,
    pub ParentMessageId: Option<Uuid>,
    pub IsRead: bool,
    pub MessageText: Option<String>,
    pub MessageType: i16,
    pub SenderFullName: Option<String>,
    pub RequestorId: Option<Uuid>,
    pub ForwardedToAirportId: Option<Uuid>,
    pub ForwardedByCarrierId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub OrganizationId: Option<Uuid>,
    pub RecepientId: Option<Uuid>,
    pub RecepientOrganizationId: Option<Uuid>,
    pub IsReadByRecipient: bool,
    pub BaggageId: Option<Uuid>,
    pub DeliveryTagNumber: Option<String>,
    pub LostBaggageCaseId: Option<Uuid>,
    pub LostBaggagePlaceId: Option<Uuid>,
    pub BsmRushDeliveryId: Option<Uuid>,
    pub IsHidden: bool,
    pub IsHiddenByRecipient: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct OrganizationAdditionalContact {
    pub Id: Uuid,
    pub OrganizationId: Option<Uuid>,
    pub Address: Option<String>,
    pub ContactAddressType: Option<i32>,
    pub Link: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct OrganizationNotification {
    pub Id: Uuid,
    pub OrganizationId: Uuid,
    pub TypeId: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct OrganizationNotificationChannel {
    pub Id: Uuid,
    pub OrganizationNotificationId: Uuid,
    pub ChannelId: i32,
    pub IsEnabled: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct OrganizationUser {
    pub Id: Uuid,
    pub OrganizationId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationUserId, AirportId))]
pub struct OrganizationUsersAirport {
    pub OrganizationUserId: Uuid,
    pub AirportId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationUserId, CarrierId))]
pub struct OrganizationUsersCarrier {
    pub OrganizationUserId: Uuid,
    pub CarrierId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Organization {
    pub ID: Uuid,
    pub OrganizationType: i16,
    pub INN: Option<String>,
    pub KPP: Option<String>,
    pub OGRN: Option<String>,
    pub LegalAddress: Option<String>,
    pub PostalAddress: Option<String>,
    pub ContactPersonFIO: Option<String>,
    pub ContactPhone: Option<String>,
    pub ContactEmail: Option<String>,
    pub BankName: Option<String>,
    pub CheckingAccount: Option<String>,
    pub CorrespondentAccount: Option<String>,
    pub BIK: Option<String>,
    pub CaseCreated: Option<bool>,
    pub CaseNonClaimedBaggageCreated: Option<bool>,
    pub FiveDaysAfterCreation: Option<bool>,
    pub CaseClosedAfterFiveDays: Option<bool>,
    pub SendByEmail: Option<bool>,
    pub SendInternally: Option<bool>,
    pub AirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Name: String,
    pub SMSCount: i32,
    pub PrintAirportContactsInDocs: Option<bool>,
    pub DeliveryBaggageCreation: Option<bool>,
    pub NotifyPassenger_ByEmail: Option<bool>,
    pub NotifyPassenger_BySMS: Option<bool>,
    pub NotifyPassenger_OverrideDocumentSettings: Option<bool>,
    pub DamagedBaggageCreated: Option<bool>,
    pub ComplexMatching: bool,
    pub CanSendDelivery: Option<bool>,
    pub AllowUseXHInCarriers: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationId, AirportId))]
pub struct OrganizationsAirport {
    pub OrganizationId: Uuid,
    pub AirportId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(OrganizationId, CarrierId))]
pub struct OrganizationsCarrier {
    pub OrganizationId: Uuid,
    pub CarrierId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct PhotoPacketItem {
    pub ID: Uuid,
    pub PacketId: Uuid,
    pub MimeType: Option<String>,
    pub Size: i32,
    pub Thumbnail: Vec<u8>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct PhotoPacket {
    pub ID: Uuid,
    pub OrganizationId: Uuid,
    pub PacketType: i16,
    pub Name: Option<String>,
    pub ExpiresAt: DateTime<Utc>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub EditStartTime: Option<DateTime<Utc>>,
    pub IsInEdit: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct PrintFormHeaderFooter {
    pub ID: Uuid,
    pub HeaderLine1: Option<String>,
    pub HeaderLine2: Option<String>,
    pub HeaderLine3: Option<String>,
    pub Footer: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct QuickDelivery {
    pub ID: Uuid,
    pub OrganizationId: Uuid,
    pub QuickDeliveryNumber: String,
    pub Status: Option<i16>,
    pub AirportId: Uuid,
    pub CarrierId: Uuid,
    pub SourceCarrierId: Uuid,
    pub LostReasonId: Option<Uuid>,
    pub LostInAirportId: Option<Uuid>,
    pub DeliveryStartedAt: Option<DateTime<Utc>>,
    pub DeliveryStartedBy: Option<Uuid>,
    pub DeliveredAt: Option<DateTime<Utc>>,
    pub DeliveredBy: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub IssuedAt: Option<DateTime<Utc>>,
    pub IssuedBy: Option<Uuid>,
    pub ArchiveDate: Option<DateTime<Utc>>,
    pub ExternalSourceDocumentId: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct QuickDeliveryBaggagePlace {
    pub ID: Uuid,
    pub QuickDeliveryId: Uuid,
    pub PlaceNumber: i32,
    pub BaggageTagNumber: String,
    pub DeliveryTagNumber: String,
    pub FirstName: Option<String>,
    pub OriginalFlightNumber: String,
    pub IsDelivered: bool,
    pub DeliveryChangedAt: Option<DateTime<Utc>>,
    pub DeliverySetBy: Option<Uuid>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub LostBaggageCaseId: Option<Uuid>,
    pub LostBaggagePlaceId: Option<Uuid>,
    pub DeliveryCost: BigDecimal,
    pub DeliveryCurrencyId: Option<Uuid>,
    pub IssueType: Option<i16>,
    pub MatchingPoints: f64,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct QuickDeliveryFlight {
    pub ID: Uuid,
    pub QuickDeliveryId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
    pub NotifyCarrier: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct QuickDeliveryHistory {
    pub Id: Uuid,
    pub QuickDeliveryId: Uuid,
    pub Status: i16,
    pub Message: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct SupportRequestNumber {
    pub CurrentNumber: i32,
    pub Id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ThingCategory {
    pub ID: Uuid,
    pub BaggageTypeId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ThingCategoryTranslation {
    pub ID: Uuid,
    pub CategoryId: Option<Uuid>,
    pub Lang: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ThingFlight {
    pub ID: Uuid,
    pub ThingId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ThingPassenger {
    pub ID: Uuid,
    pub ThingId: Uuid,
    pub Surname: Option<String>,
    pub Name: Option<String>,
    pub SecondName: Option<String>,
    pub Initials: Option<String>,
    pub Gender: Option<i16>,
    pub ServiceClass: Option<String>,
    pub Language: Option<String>,
    pub PhoneNumber: Option<String>,
    pub BookingNumber: Option<String>,
    pub TicketNumber: Option<String>,
    pub PassengerPlaceNumber: Option<String>,
    pub EmailAddress: Option<String>,
    pub AdditionalPhoneNumber: Option<String>,
    pub NotifyByEmail: bool,
    pub NotifyBySMS: bool,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct ThingPhoto {
    pub Id: Uuid,
    pub ThingPropertiesId: Uuid,
    pub MimeType: Option<String>,
    pub Size: i32,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ThingProperty {
    pub ID: Uuid,
    pub ThingId: Uuid,
    pub PropertyType: Option<i16>,
    pub ColorId: Uuid,
    pub BaggageTypeId: Uuid,
    pub MaterialId: Uuid,
    pub CategoryId: Option<Uuid>,
    pub BrandId: Option<Uuid>,
    pub ColorDescription: Option<String>,
    pub Description: Option<String>,
    pub StoragePlace: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ThingPropertiesId, BaggageTypeId))]
pub struct ThingPropertiesBasicElement {
    pub ThingPropertiesId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ThingPropertiesId, BaggageTypeId))]
pub struct ThingPropertiesExternalElement {
    pub ThingPropertiesId: Uuid,
    pub BaggageTypeId: Uuid,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Thing {
    pub ID: Uuid,
    pub Status: Option<i16>,
    pub ThingType: i16,
    pub OrganizationId: Uuid,
    pub DocumentNumber: Option<String>,
    pub SuspendedDate: Option<DateTime<Utc>>,
    pub ArchiveDate: Option<DateTime<Utc>>,
    pub RenewalDate: Option<DateTime<Utc>>,
    pub ClosedDate: Option<DateTime<Utc>>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub AirportId: Uuid,
    pub CarrierId: Uuid,
    pub ClosedBy: Option<Uuid>,
    pub DeliveredAt: Option<DateTime<Utc>>,
    pub DeliveredBy: Option<Uuid>,
    pub DeliveryStartedAt: Option<DateTime<Utc>>,
    pub DeliveryStartedBy: Option<Uuid>,
    pub SuspendedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct ThingsHistory {
    pub Id: Uuid,
    pub ThingId: Uuid,
    pub Status: Option<i16>,
    pub Message: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(LostThingId, FoundThingId))]
pub struct ThingsMatche {
    pub LostThingId: Uuid,
    pub FoundThingId: Uuid,
    pub MatchingScore: f64,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct ThingsMatchingCoefficient {
    pub FirstName: f64,
    pub LastName: f64,
    pub Initials: f64,
    pub Phone: f64,
    pub PermanentAddress: f64,
    pub TemporaryAddress: f64,
    pub Email: f64,
    pub FlightNumber: f64,
    pub Carrier: f64,
    pub DepartureAirport: f64,
    pub ArrivalAirport: f64,
    pub BaggageType: f64,
    pub Color: f64,
    pub Brand: f64,
    pub Id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct UnclaimedBaggageDeliveryFlight {
    pub ID: Uuid,
    pub CaseId: Uuid,
    pub LostBaggagePlaceId: Uuid,
    pub CreatedAt: DateTime<Utc>,
    pub CreatedBy: Option<Uuid>,
    pub UpdatedAt: Option<DateTime<Utc>>,
    pub UpdatedBy: Option<Uuid>,
    pub IsDeleted: bool,
    pub DeletedAt: Option<DateTime<Utc>>,
    pub DeletedBy: Option<Uuid>,
    pub Position: i16,
    pub DepartureAirportId: Option<Uuid>,
    pub ArrivalAirportId: Option<Uuid>,
    pub CarrierId: Option<Uuid>,
    pub FlightNumber: Option<String>,
    pub DepartureDate: Option<DateTime<Utc>>,
    pub ArrivalDate: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(CommercialActId))]
pub struct UnclaimedCommercialActCheckResult {
    pub CommercialActId: Uuid,
    pub PlacesRegistered: i16,
    pub PlacesReceived: i16,
    pub PlacesLost: i16,
    pub RegisteredWeight: BigDecimal,
    pub ReceivedWeight: BigDecimal,
    pub LostWeight: BigDecimal,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(Id))]
pub struct UserActionsHistory {
    pub Id: Uuid,
    pub UserId: Uuid,
    pub ActionType: Option<i16>,
    pub Message: Option<String>,
    pub Content: Option<String>,
    pub CreatedAt: DateTime<Utc>,
    pub DocumentId: Option<Uuid>,
}

